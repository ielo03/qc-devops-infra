name: Nightly Build and Integration Tests

on:
  schedule:
    - cron: "0 8 * * *"    # Runs daily at 08:00 UTC (adjust as needed)
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-24.04
    env:
      AWS_REGION: us-west-1
      # AWS account ID (ECR registry prefix)
      ECR_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      # Image names with tag (adjust if needed)
      FRONTEND_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/frontend:latest"
      BACKEND_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/backend:latest"
      # Application environment variables (override via GitHub Secrets)
      DB_HOST: mysql
      DB_PORT: 3306
      FRONTEND_PORT: 3001
      FRONTEND_HOST: 0.0.0.0
      BACKEND_PORT: 3002
      BACKEND_HOST: 0.0.0.0
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Pull Frontend Image from ECR
        run: docker pull $FRONTEND_IMAGE

      - name: Pull Backend Image from ECR
        run: docker pull $BACKEND_IMAGE

      - name: Create .env file for Docker Compose
        run: |
          cat <<EOF > .env
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          FRONTEND_PORT=${FRONTEND_PORT}
          FRONTEND_HOST=${FRONTEND_HOST}
          BACKEND_PORT=${BACKEND_PORT}
          BACKEND_HOST=${BACKEND_HOST}
          MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
          MYSQL_DATABASE=${MYSQL_DATABASE}
          MYSQL_USER=${MYSQL_USER}
          MYSQL_PASSWORD=${MYSQL_PASSWORD}
          GEMINI_API_KEY=${GEMINI_API_KEY}
          EOF
          cat .env

      - name: Deploy Application with Docker Compose
        run: docker compose up --build -d

      - name: Wait for Backend Health (up to 60 seconds)
        run: |
          for i in {1..30}; do
              if curl -s http://localhost:${BACKEND_PORT}/health > /dev/null; then
                  echo "Backend is healthy."
                  exit 0
              else
                  echo "Waiting for backend..."
                  sleep 2
              fi
          done
          echo "Backend did not become healthy in time."
          exit 1

      - name: Run Integration Tests
        run: |
          chmod +x ./qc-devops-infra/integration-tests.sh
          ./qc-devops-infra/integration-tests.sh

      - name: Tear Down Deployment
        run: docker compose down
