name: Nightly Build and Integration Tests

on:
  schedule:
    - cron: "0 8 * * *"    # Runs daily at 08:00 UTC (adjust as needed)
  workflow_dispatch:

jobs:
  Test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Infra
        uses: actions/checkout@v4

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          repository: ielo03/qc-devops-source
          token: ${{ secrets.GITHUB_TOKEN }}
          path: source

      - name: Set Up Environment Variables
        working-directory: source
        run: |
          cat <<'EOF' > .env
          DB_HOST=mysql
          DB_PORT=3306
          FRONTEND_PORT=3001
          FRONTEND_HOST=0.0.0.0
          BACKEND_PORT=3002
          BACKEND_HOST=0.0.0.0
          MYSQL_ROOT_PASSWORD=password
          MYSQL_DATABASE=qc-test
          MYSQL_USER=qc-user
          MYSQL_PASSWORD=password
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          EOF

      - name: Run Backend Unit Tests
        working-directory: source/backend
        run: |
          npm install
          npm test
      
      - name: Run Frontend Unit Tests
        working-directory: source/frontend
        run: |
          npm install
          npm test
    
  Push-Images:
    needs: Test
    runs-on: ubuntu-24.04
    env:
      AWS_REGION: us-west-1
      ECR_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      FRONTEND_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/frontend:latest"
      BACKEND_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/backend:latest"
    steps:
      - name: Checkout Infra
        uses: actions/checkout@v4

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          repository: ielo03/qc-devops-source
          token: ${{ secrets.GITHUB_TOKEN }}
          path: source
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Backend Image
        working-directory: source/backend
        run: |
          docker build -t $BACKEND_IMAGE .
          docker push $BACKEND_IMAGE

      - name: Build and Push Frontend Image
        working-directory: source/frontend
        run: |
          docker build -t $FRONTEND_IMAGE .
          docker push $FRONTEND_IMAGE

  Run-Smoketest:
    needs: Push-Images
    runs-on: Ubuntu-24.04
    env:
      DB_HOST: mysql
      DB_PORT: 3306
      FRONTEND_PORT: 3001
      FRONTEND_HOST: 0.0.0.0
      BACKEND_PORT: 3002
      BACKEND_HOST: 0.0.0.0
      AWS_REGION: us-west-1
      ECR_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      FRONTEND_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/frontend:latest"
      BACKEND_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/backend:latest"
    steps:
      - name: Launch EC2
        id: launch_ec2
        run: |
          echo "Launching EC2 instance from AMI ami-0c4df6d9107cf5a3c"
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c4df6d9107cf5a3c \
            --instance-type t2.micro \
            --count 1 \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "Launched instance ID: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for EC2 Health
        run: |
          INSTANCE_ID=${{ steps.launch_ec2.outputs.instance_id }}
          echo "Waiting for instance $INSTANCE_ID to be healthy..."
          # Wait until both system and instance status checks pass
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          echo "Instance $INSTANCE_ID is healthy!"

      - name: Get Public IP of EC2 Instance
        id: get_ip
        run: |
          INSTANCE_ID=${{ steps.launch_ec2.outputs.instance_id }}
          echo "Retrieving public IP for instance $INSTANCE_ID"
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "Public IP: $PUBLIC_IP"

      - name: Set Up EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ steps.get_ip.outputs.public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Connected to EC2 instance at $(hostname)"
            cd qc-devops-infra
            git pull
            cat <<'EOF' > .env
            DB_HOST=mysql
            DB_PORT=3306
            FRONTEND_PORT=3001
            FRONTEND_HOST=0.0.0.0
            BACKEND_PORT=3002
            BACKEND_HOST=0.0.0.0
            MYSQL_ROOT_PASSWORD=password
            MYSQL_DATABASE=qc-test
            MYSQL_USER=qc-user
            MYSQL_PASSWORD=password
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            EOF
            cd ../qc-devops-source
            git pull
            cd ..
            docker system prune -a --volumes -f
            aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 061039790334.dkr.ecr.us-west-1.amazonaws.com

      - name: Run Integration Tests
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ steps.get_ip.outputs.public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd qc-devops-infra
            docker compose up -d
            ./wait-for-it.sh localhost:3002 --timeout=120 --strict -- echo "Backend is up"
            ./integration-tests.sh

  Terminate-Instance:
    runs-on: Ubuntu-24.04
    needs: Run-Smoketest
    steps:
      - name: Terminate EC2 instance
        run: |
          echo "Terminating EC2 instance ${{ needs.Run-Smoketest.outputs.instance_id }}..."
          aws ec2 terminate-instances --instance-ids ${{ needs.Run-Smoketest.outputs.instance_id }}
          
  Remove-Docker-Images:
    needs: [Push-Images, Run-Smoketest]
    runs-on: ubuntu-24.04
    if: ${{ always() && needs.Run-Smoketest.outcome != 'success' }}
    env:
      AWS_REGION: us-west-1
      ECR_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Remove Pushed Docker Images
        run: |
          echo "Integration tests failed. Removing pushed Docker images..."
          aws ecr batch-delete-image --repository-name frontend --image-ids imageTag=latest --region $AWS_REGION
          aws ecr batch-delete-image --repository-name backend --image-ids imageTag=latest --region $AWS_REGION
  
